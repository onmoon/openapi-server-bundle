<?php

declare(strict_types=1);

namespace OnMoon\OpenApiServerBundle\CodeGenerator\PhpParserGenerators;

use OnMoon\OpenApiServerBundle\CodeGenerator\Definitions\GeneratedFileDefinition;
use OnMoon\OpenApiServerBundle\CodeGenerator\Definitions\GeneratedInterfaceDefinition;
use OnMoon\OpenApiServerBundle\CodeGenerator\Definitions\RequestHandlerInterfaceDefinition;
use function count;
use function Safe\sprintf;

class InterfaceCodeGenerator extends CodeGenerator
{
    public function generate(GeneratedInterfaceDefinition $definition) : GeneratedFileDefinition
    {
        $fileBuilder = $this
            ->factory
            ->namespace($definition->getNamespace());

        $interfaceBuilder = $this
            ->factory
            ->interface($definition->getClassName())
            ->setDocComment(sprintf(self::AUTOGENERATED_WARNING, 'interface'));

        $extends = $definition->getExtends();
        if ($extends !== null) {
            $interfaceBuilder->extend($extends->getClassName());
            $this->use($fileBuilder, $definition->getNamespace(), $extends);
        }

        if ($definition instanceof RequestHandlerInterfaceDefinition) {
            $methodBuilder = $this->factory->method($definition->getMethodName())->makePublic();
            $request       = $definition->getRequestType();
            $docBlocks     = [];

            if ($request !== null) {
                $this->use($fileBuilder, $definition->getNamespace(), $request);

                $methodBuilder->addParam(
                    $this->factory->param('request')->setType($request->getClassName())
                );
                if ($this->fullDocs) {
                    $docBlocks[] = sprintf(
                        '@param %s $%s',
                        $request->getClassName(),
                        'request'
                    );
                }
            }

            $response = $definition->getResponseType();
            if ($response !== null) {
                $this->use($fileBuilder, $definition->getNamespace(), $response);
                $methodBuilder->setReturnType($response->getClassName());
                if ($this->fullDocs) {
                    $docBlocks[] = sprintf(
                        '@return %s',
                        $response->getClassName()
                    );
                }
            } else {
                $methodBuilder->setReturnType('void');
            }

            $description = $definition->getMethodDescription();
            if ($description !== null) {
                if (count($docBlocks)) {
                    $docBlocks = [$description, '', ...$docBlocks];
                } else {
                    $docBlocks[] = $description;
                }
            }

            if (count($docBlocks) > 0) {
                $methodBuilder->setDocComment($this->getDocComment($docBlocks));
            }

            $interfaceBuilder->addStmt($methodBuilder);
        }

        $fileBuilder = $fileBuilder->addStmt($interfaceBuilder);

        return new GeneratedFileDefinition(
            $definition,
            $this->printFile($fileBuilder)
        );
    }
}
