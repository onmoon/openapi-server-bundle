<?php

declare(strict_types=1);

namespace OnMoon\OpenApiServerBundle\CodeGenerator\PhpParserGenerators;

use Exception;
use OnMoon\OpenApiServerBundle\CodeGenerator\Definitions\PropertyDefinition;
use OnMoon\OpenApiServerBundle\Types\ScalarTypesResolver;
use PhpParser\BuilderFactory;
use PhpParser\Node\Scalar\LNumber;
use PhpParser\Node\Stmt\Declare_;
use PhpParser\Node\Stmt\DeclareDeclare;
use PhpParser\PrettyPrinter\Standard;

use function array_map;
use function count;
use function implode;
use function Safe\sprintf;
use function trim;

use const PHP_EOL;

abstract class CodeGenerator
{
    protected const AUTOGENERATED_WARNING = '/**
      * This %s was automatically generated
      * You should not change it manually as it will be overwritten
      */';

    protected BuilderFactory $factory;
    protected ScalarTypesResolver $typeResolver;
    protected string $languageLevel;
    protected bool $fullDocs;

    public function __construct(BuilderFactory $factory, ScalarTypesResolver $typeResolver, string $languageLevel, bool $fullDocs)
    {
        $this->factory       = $factory;
        $this->typeResolver  = $typeResolver;
        $this->languageLevel = $languageLevel;
        $this->fullDocs      = $fullDocs;
    }

    public function getTypeDocBlock(FileBuilder $builder, PropertyDefinition $definition): string
    {
        return $this->getTypeName($builder, $definition) .
            ($definition->isArray() ? '[]' : '') .
            ($definition->isNullable() ? '|null' : '');
    }

    public function getTypePhp(FileBuilder $builder, PropertyDefinition $definition): string
    {
        return ($definition->isNullable() ? '?' : '') .
            ($definition->isArray() ? 'array' : $this->getTypeName($builder, $definition));
    }

    public function getTypeName(FileBuilder $builder, PropertyDefinition $definition): string
    {
        $objectType = $definition->getObjectTypeDefinition();
        $scalarType = $definition->getScalarTypeId();

        if ($objectType !== null) {
            return $builder->getReference($objectType);
        }

        if ($scalarType === null) {
            throw new Exception('One of ObjectTypeDefinition and ScalarTypeId should not be null');
        }

        return $this->typeResolver->getPhpType($scalarType);
    }

    /** @param string[] $lines */
    public function getDocComment(array $lines): string
    {
        if (count($lines) === 1) {
            $glued = ' ' . trim($lines[0]);
        } else {
            $asteriskLines = array_map(
                static fn (string $line): string => ' * ' . trim($line),
                $lines
            );
            $glued         = PHP_EOL . implode(PHP_EOL, $asteriskLines) . PHP_EOL;
        }

        return sprintf('/**%s */', $glued);
    }

    public function printFile(FileBuilder $fileBuilder): string
    {
        return (new Standard())->prettyPrintFile([
            new Declare_([new DeclareDeclare('strict_types', new LNumber(1))]),
            $fileBuilder->getNamespace()->getNode(),
        ]);
    }
}
