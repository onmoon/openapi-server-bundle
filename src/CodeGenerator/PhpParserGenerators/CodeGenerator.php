<?php

declare(strict_types=1);

namespace OnMoon\OpenApiServerBundle\CodeGenerator\PhpParserGenerators;

use OnMoon\OpenApiServerBundle\CodeGenerator\Definitions\ClassDefinition;
use OnMoon\OpenApiServerBundle\CodeGenerator\Definitions\PropertyDefinition;
use OnMoon\OpenApiServerBundle\OpenApi\ScalarTypesResolver;
use PhpParser\Builder\Namespace_;
use PhpParser\BuilderFactory;
use PhpParser\Node\Scalar\LNumber;
use PhpParser\Node\Stmt\Declare_;
use PhpParser\Node\Stmt\DeclareDeclare;
use PhpParser\PrettyPrinter\Standard;
use function array_map;
use function count;
use function implode;
use function sprintf;
use function trim;
use const PHP_EOL;

abstract class CodeGenerator
{
    protected const AUTOGENERATED_WARNING = '/**
      * This %s was automatically generated
      * You should not change it manually as it will be overwritten
      */';

    protected BuilderFactory $factory;
    protected ScalarTypesResolver $typeResolver;
    protected string $languageLevel;
    protected bool $fullDocs = false;

    public function __construct(BuilderFactory $factory, ScalarTypesResolver $typeResolver, string $languageLevel)
    {
        $this->factory       = $factory;
        $this->typeResolver  = $typeResolver;
        $this->languageLevel = $languageLevel;
    }

    public function use(Namespace_ $builder, string $parentNameSpace, ClassDefinition $class) : void
    {
        if ($parentNameSpace === $class->getNamespace()) {
            return;
        }

        $builder->addStmt($this->factory->use($class->getFQCN()));
    }

    public function getTypeDocBlock(PropertyDefinition $definition) : string
    {
        return $this->getTypeName($definition) .
            ($definition->isArray() ? '[]' : '') .
            ($definition->isNullable() ? '|null' : '');
    }

    public function getTypePhp(PropertyDefinition $definition) : string
    {
        return ($definition->isNullable() ? '?' : '') .
            ($definition->isArray() ? 'array' : $this->getTypeName($definition));
    }

    public function getTypeName(PropertyDefinition $definition) : string
    {
        if ($definition->getObjectTypeDefinition() !== null) {
            return $definition->getObjectTypeDefinition()->getClassName();
        }

        return $this->typeResolver->getPhpType($definition->getScalarTypeId());
    }

    /** @param string[] $lines */
    public function getDocComment(array $lines) : string
    {
        if (count($lines) === 1) {
            return sprintf('/** %s */', trim($lines[0]));
        }

        return implode(
            PHP_EOL,
            [
                '/**',
                ...array_map(
                //ToDo: add space after * anyway after tests
                    static fn(string $line) : string => ' *' . (trim($line)?' ':'') . trim($line),
                    $lines
                ),
                ' */',
            ]
        );
    }

    public function printFile(Namespace_ $fileBuilder) : string
    {
        return (new Standard())->prettyPrintFile([
            new Declare_([new DeclareDeclare('strict_types', new LNumber(1))]),
            $fileBuilder->getNode(),
        ]);
    }
}
