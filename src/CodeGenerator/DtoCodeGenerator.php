<?php


namespace OnMoon\OpenApiServerBundle\CodeGenerator;


use OnMoon\OpenApiServerBundle\CodeGenerator\Dto\Definitions\ClassDefinition;
use OnMoon\OpenApiServerBundle\CodeGenerator\Dto\Definitions\DtoDefinition;
use OnMoon\OpenApiServerBundle\CodeGenerator\Dto\Definitions\PropertyDefinition;
use OnMoon\OpenApiServerBundle\CodeGenerator\Dto\Definitions\ResponseDtoDefinition;
use OnMoon\OpenApiServerBundle\OpenApi\ScalarTypesResolver;
use PhpParser\Builder\Method;
use PhpParser\Builder\Namespace_;
use PhpParser\Builder\Param;
use PhpParser\Builder\Property;
use PhpParser\BuilderFactory;
use PhpParser\Node;
use PhpParser\Node\Expr\Assign;
use PhpParser\Node\Expr\Variable;
use PhpParser\Node\Scalar\LNumber;
use PhpParser\Node\Stmt\Declare_;
use PhpParser\Node\Stmt\DeclareDeclare;
use PhpParser\Node\Stmt\Return_;
use PhpParser\PrettyPrinter\Standard;

class DtoCodeGenerator extends CodeGenerator
{
    public function generate(DtoDefinition $definition): GeneratedClass
    {
        $fileBuilder = $this
            ->factory
            ->namespace($definition->getNamespace());

        $classBuilder = $this
            ->factory
            ->class($definition->getClassName())
            ->makeFinal()
            ->setDocComment(sprintf(self::AUTOGENERATED_WARNING, 'class'));

        if ($definition->getImplements() !== null) {
            $classBuilder->implement($definition->getImplements()->getClassName());
            $this->use($fileBuilder, $definition->getNamespace(), $definition->getImplements());
        }

        foreach ($definition->getProperties() as $property) {
            if ($property->getObjectTypeDefinition() !== null) {
                $this->use($fileBuilder, $definition->getNamespace(), $property->getObjectTypeDefinition());
            }
        }

        $classBuilder->addStmts($this->generateProperties($definition));
        //ToDo: Move below after tests
        if ($definition instanceof ResponseDtoDefinition) {
            $classBuilder->addStmt($this->generateResponseCodeStaticMethod($definition));
        }
        $classBuilder->addStmts($this->generateConstructor($definition));
        $classBuilder->addStmts($this->generateGetters($definition));
        $classBuilder->addStmts($this->generateSetters($definition));

        $fileBuilder = $fileBuilder->addStmt($classBuilder);

        return new GeneratedClass(
            $definition->getFilePath(),
            $definition->getFileName(),
            $definition->getNamespace(),
            $definition->getClassName(),
            (new Standard())->prettyPrintFile([
                new Declare_([new DeclareDeclare('strict_types', new LNumber(1))]),
                $fileBuilder->getNode(),
            ])
        );
    }

    /**
     * @return Node[]
     */
    private function generateProperties(DtoDefinition $definition): array {
        $properties = [];
        foreach ($definition->getProperties() as $property) {
            $properties[] = $this->generateClassProperty($property);
        }
        return $properties;
    }

    /**
     * @return Node[]
     */
    private function generateGetters(DtoDefinition $definition): array {
        $properties = [];
        foreach ($definition->getProperties() as $property) {
            if($property->hasGetter()) {
                $properties[] = $this->generateGetter($property);
            }
        }
        return $properties;
    }

    /**
     * @return Node[]
     */
    private function generateSetters(DtoDefinition $definition): array {
        $properties = [];
        foreach ($definition->getProperties() as $property) {
            if($property->hasSetter()) {
                $properties[] = $this->generateSetter($property);
            }
        }
        return $properties;
    }

    /**
     * @return Node[]
     */
    private function generateConstructor(DtoDefinition $definition): array {
        $constructorBuilder   = $this->factory->method('__construct')->makePublic();
        $constructorDocs = [];
        $constructorEmpty = true;

        foreach ($definition->getProperties() as $property) {
            if(!$property->isInConstructor()) {
                continue;
            }
            $constructorEmpty = false;
            $constructorBuilder
                ->addParam($this->generateMethodParameter($property))
                ->addStmt($this->getAssignmentDefinition($property->getClassPropertyName()));
            if($this->fullDocs || $property->isArray()) {
                $constructorDocs[] = sprintf(
                    '@param %s $%s',
                    $this->getTypeDocBlock($property),
                    $property->getClassPropertyName()
                );
            }
        }
        if($constructorEmpty) {
            return [];
        }

        if(count($constructorDocs) > 0) {
            $constructorBuilder->setDocComment($this->getDocComment($constructorDocs));
        }
        return [$constructorBuilder];
    }

    private function generateClassProperty(PropertyDefinition $definition): Property
    {
        $property = $this->factory
            ->property($definition->getClassPropertyName())
            ->makePrivate();

        if ($definition->getDefaultValue() !== null) {
            $property->setDefault($definition->getDefaultValue());
        } elseif ($definition->isNullable()) {
            $property->setDefault(null);
        }

        $property->setType($this->getTypePhp($definition));

        $docCommentLines = [];

        if ($definition->getDescription() !== null) {
            $docCommentLines[] = sprintf('%s', $definition->getDescription());
            $docCommentLines[] = '';
        }

        //ToDo: remove this
        if(
            strpos($definition->getClassPropertyName(), 'queryParameters') === false
            &&
            strpos($definition->getClassPropertyName(), 'pathParameters') === false
            &&
            strpos($definition->getClassPropertyName(), 'body') === false
        )
        $docCommentLines[] = sprintf(
            '@var %s $%s ',
            $this->getTypeDocBlock($definition),
            $definition->getClassPropertyName()
        );
if(count($docCommentLines))
        $property->setDocComment($this->getDocComment($docCommentLines));
        return $property;
    }

    private function generateMethodParameter(PropertyDefinition $definition): Param
    {//ToDo: Remove
        return $this
            ->factory
            ->param($definition->getClassPropertyName())
            ->setType(str_replace('?', '', $this->getTypePhp($definition)));
    }

    private function getAssignmentDefinition(string $name): Assign
    {
        return new Assign(
            new Variable('this->' . $name),
            new Variable($name)
        );
    }

    private function generateGetter(PropertyDefinition $definition): Method
    {
        $method = $this->factory
            ->method($definition->getGetterName())
            ->makePublic()
            ->setReturnType($this->getTypePhp($definition))
            ->addStmt(new Return_(new Variable('this->' . $definition->getClassPropertyName())));

        if($this->fullDocs || $definition->isArray()) {
            $method->setDocComment(
                $this->getDocComment(['@return ' . $this->getTypeDocBlock($definition)])
            );
        }

        return $method;
    }

    private function generateSetter(PropertyDefinition $definition): Method
    {
        $method = $this->factory
            ->method($definition->getSetterName())
            ->makePublic()
            ->setReturnType('self')
            ->addParam($this->generateMethodParameter($definition))
            ->addStmt($this->getAssignmentDefinition($definition->getClassPropertyName()))
            ->addStmt(new Return_(new Variable('this')));
//ToDo: remove
        if($this->fullDocs || $definition->isArray()) {
            $blocks = [
                sprintf(
                    '@param %s $%s',
                    str_replace('|null', '', $this->getTypeDocBlock($definition)),
                    $definition->getClassPropertyName()
                )
            ];
            if ($this->fullDocs) {
                $blocks[] = '@return self';
            }
            $method->setDocComment($this->getDocComment($blocks));
        }

        return $method;
    }

    private function generateResponseCodeStaticMethod(ResponseDtoDefinition $definition): Method
    {
        $responseCode = (int)$definition->getStatusCode();
        $method = $this
            ->factory
            ->method('_getResponseCode')
            ->makePublic()
            ->makeStatic()
            ->setReturnType('?int')
            ->addStmt(
                new Return_(
                    $this->factory->val($responseCode !== 0 ? $responseCode : null)
                )
            );
        if($this->fullDocs) {
            $method->setDocComment(
                $this->getDocComment(['@return ?int'])
            );
        }
        return $method;
    }

}
